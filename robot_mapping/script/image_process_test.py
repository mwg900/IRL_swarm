#-*- coding: utf-8 -*-
from __future__ import print_function 
import cv2
import numpy as np
import math
import imutils

inf = 0
ranges = [2.7899999618530273, inf, 2.1540000438690186, 2.1619999408721924, 2.1570000648498535, 2.1579999923706055, 2.1619999408721924, 2.174999952316284, inf, inf, inf,
        inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 2.5179998874664307, 2.5329999923706055, inf, inf, inf, inf, inf, inf, inf, 0.9649999737739563, 
        0.9490000009536743, 0.9639999866485596, inf, 0.9649999737739563, 0.9380000233650208, 0.9240000247955322, 0.9110000133514404, 0.9039999842643738, inf, 0.9039999842643738, 
        inf, inf, inf, inf, inf, inf, inf, inf, 1.4609999656677246, 1.5420000553131104, 1.6069999933242798, 1.659000039100647, inf, 1.7000000476837158, inf, 2.9839999675750732,
        inf, 2.927999973297119, 2.9130001068115234, 2.875, inf, inf, 2.822999954223633, 2.8010001182556152, 2.7820000648498535, inf, 2.9110000133514404, inf, inf, inf, inf, inf,
        0.5440000295639038, inf, 0.5379999876022339, 0.5339999794960022, 0.531000018119812, 0.5270000100135803, inf, inf, inf, inf, inf, 0.5139999985694885, 0.5090000033378601,
        0.5009999871253967, inf, 0.5019999742507935, inf, 0.5059999823570251, inf, 0.4790000021457672, inf, 0.4399999976158142, 0.42899999022483826, 0.42100000381469727,
        0.41999998688697815, inf, inf, inf, inf, 0.38999998569488525, 0.14900000393390656, 0.3970000147819519, 0.3959999978542328, 0.39500001072883606, inf, inf, inf, inf, inf,
        0.4090000092983246, 0.4129999876022339, 0.41999998688697815, 0.42899999022483826, inf, 0.4410000145435333, 0.4580000042915344, inf, 0.5950000286102295, 
        0.578000009059906, 0.5600000023841858, 0.5440000295639038, 0.531000018119812, 0.5189999938011169, 0.5049999952316284, 0.49300000071525574, 0.4819999933242798, 
        0.4729999899864197, 0.4620000123977661, 0.4519999921321869, inf, 0.4480000138282776, 0.4480000138282776, 0.4580000042915344, 0.44200000166893005, 0.4320000112056732, 
        0.42500001192092896, 0.4169999957084656, inf, 0.4090000092983246, 0.40299999713897705, 0.3970000147819519, 0.38999998569488525, 0.3840000033378601, 0.3790000081062317,
        0.37400001287460327, 0.36899998784065247, 0.36399999260902405, 0.36000001430511475, inf, 0.35499998927116394, 0.3479999899864197, inf, 0.3449999988079071, 0.3400000035762787, 
        0.3370000123977661, 0.33399999141693115, 0.3310000002384186, 0.32899999618530273, 0.3269999921321869, 0.3240000009536743, inf, 0.32199999690055847, 0.3199999928474426, 
        0.3190000057220459, 0.31700000166893005, 0.3160000145435333, 0.3149999976158142, inf, inf, inf, inf, inf, inf, inf, 1.1449999809265137, 1.128000020980835, inf, 
        1.1080000400543213, 1.1009999513626099, 1.0920000076293945, 1.0759999752044678, 1.0740000009536743, 1.0709999799728394, 1.0679999589920044, inf, 1.065000057220459, 
        1.0570000410079956, 1.0540000200271606, 1.0549999475479126, 1.0579999685287476, 1.062999963760376, inf, inf, inf, inf, inf, inf, 2.6640000343322754, 2.680000066757202, 
        2.7139999866485596, 2.684999942779541, 2.694999933242798, inf, 2.7139999866485596, inf, inf, 0.6660000085830688, 0.6480000019073486, 0.6330000162124634, 0.6169999837875366, 
        0.6019999980926514, 0.5870000123977661, 0.574999988079071, inf, 0.44999998807907104, 0.453000009059906, 0.4350000023841858, 0.4269999861717224, 0.43700000643730164, inf, 
        0.44699999690055847, 0.4580000042915344, 0.47099998593330383, 0.48399999737739563, inf, 0.4970000088214874, 0.5120000243186951, 0.527999997138977, 0.5329999923706055, 0.5070000290870667, 
        0.5019999742507935, 0.5009999871253967, inf, 0.5, inf, 0.6669999957084656, 0.703000009059906, 0.7099999785423279, inf, inf, inf, 0.6150000095367432, inf, inf, inf, inf, inf, inf, inf, inf, 
        0.6119999885559082, 0.597000002861023, 0.5960000157356262, 0.14399999380111694, inf, inf, inf, inf, inf, 0.3240000009536743, inf, inf, inf, 0.3149999976158142, 0.30799999833106995, 
        0.3050000071525574, 0.3059999942779541, 0.3089999854564667, 0.31299999356269836, inf, 0.3019999861717224, 0.3070000112056732, 0.3100000023841858, 0.31700000166893005, inf, inf, inf, inf, 
        0.34299999475479126, inf, 0.35499998927116394, 0.36000001430511475, 0.35600000619888306, inf, inf, inf, inf, inf, 0.3790000081062317, 0.382999986410141, 0.3840000033378601, inf, 
        0.37599998712539673, 0.3919999897480011, 0.3880000114440918, inf, inf, 0.7919999957084656, 0.8040000200271606, 0.796999990940094, 0.7730000019073486, 0.7020000219345093, 0.7429999709129333, 
        0.6959999799728394, 0.6060000061988831, 0.6000000238418579, 0.527999997138977, 0.5070000290870667, 0.4909999966621399, 0.4869999885559082, inf, 0.49799999594688416, 0.4970000088214874, 
        0.5009999871253967, 0.4950000047683716, 0.49799999594688416, 0.5370000004768372, inf, 0.5669999718666077, inf, 0.7089999914169312, 0.8809999823570251, 0.8500000238418579, 0.8220000267028809, 
        0.7879999876022339, inf, 0.6489999890327454, 0.6570000052452087, inf, 0.6420000195503235, 0.6430000066757202, 0.6460000276565552, 0.6480000019073486, 0.6489999890327454, 0.652999997138977, 
        0.6570000052452087, inf, 0.6610000133514404, 0.6660000085830688, 0.6819999814033508, 0.6919999718666077, inf, 0.7639999985694885, 0.7509999871253967, 0.7459999918937683, 0.7459999918937683, 
        0.7699999809265137, inf, 1.7569999694824219, inf, 1.7660000324249268, 2.3589999675750732, 2.374000072479248, 2.4049999713897705, inf]
'''
canvas = np.zeros((600,720,1), dtype = "uint8")

for i in range(len(ranges)):    
    dist = int((ranges[i] / 8.0)*600)
    canvas[dist:dist+2, i*2+1:i*2+3] = (255,255,255)
'''
width = 360
height = 200
laser_map = np.zeros((height,width,1), dtype = "uint8")
root_scale = np.zeros((120,width,3), dtype = "uint8")

range_max = 4.0
#받아들인 거리 토픽 정보를 픽셀로 변환 

#루트 스케일
for i in range(len(ranges)):    
    if ranges[i] is not inf:
        dist = 70*math.sqrt(ranges[i])-25
        dist = int(dist)
        print('%d' %dist)
        root_scale[dist:dist+1, i] = (255,255,255)

dst_image = imutils.resize(root_scale, 720)

#cv2.imshow("root_scale",dst_image)

blurred = cv2.GaussianBlur(root_scale, (5, 3), 0)
blureed_scale_zoom = imutils.resize(blurred, 720)
#cv2.imshow("blurred",blureed_scale_zoom)

#============================================================# 
#    Find_contour  
#============================================================#
# find contours in the mask and initialize the current
imgray = cv2.cvtColor(blureed_scale_zoom,cv2.COLOR_BGR2GRAY)   #1채널 이미지 변환
ret, thresh = cv2.threshold(imgray,20,255,0)                #2진 이미지 변환
#cv2.imshow("thresh",thresh)                 

# The result "contours" is a Python list, where it contains all objects boundary points as separate lists.
contours, hierarchy = cv2.findContours(thresh,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2:] # 3개의 리턴 요소 중 뒤의 2개만 리턴

# 크기 측정 후 필터링
for h,cnt in enumerate(contours):
    M = cv2.moments(cnt)
    area = M['m00']           #모멘트 성분을 이용하여 영역 검출
    (x,y),radius = cv2.minEnclosingCircle(cnt)
    center = (int(x),int(y))
    diameter = 2*radius
    radius=int(radius)              #지름
    
    if area < 20 or area > 300: 
        cv2.drawContours(thresh,[cnt],-1,(0),-1)  #마스킹

    elif (int(y) <= 80)                  and (30 < diameter and diameter < 40):
        cv2.drawContours(thresh,[cnt],-1,(255),-1)    #윤곽선 출력
        pass
    elif (80 < int(y) and int(y) <= 150) and (20 < diameter and diameter < 30):
        cv2.drawContours(thresh,[cnt],-1,(255),-1)    #윤곽선 출력
        pass
    elif (150 < int(y) and int(y) <= 210) and (10 < diameter and diameter < 20):
        cv2.drawContours(thresh,[cnt],-1,(255),-1)    #윤곽선 출력
        pass
    elif (210 < int(y) and int(y) <= 255) and (10 < diameter and diameter < 15):
        cv2.drawContours(thresh,[cnt],-1,(255),-1)    #윤곽선 출력
        pass
    else:
        cv2.drawContours(thresh,[cnt],-1,(0),-1)  #마스킹
          
#한번 더 블러링 (부드러운 결과물 생성)    
blurred = cv2.GaussianBlur(thresh, (5, 5), 1)
thresh = cv2.threshold(blurred,180,255,0)[-1]                #2진 이미지 변환
#cv2.imshow("threshblurredthresh",thresh)   
'''
#모폴로지
erode = cv2.erode(thresh, None, iterations=1)
cv2.imshow("eroded",erode)  
'''


#한번 더 윤곽선 처리, 남은 윤곽선 중 스코어를 매겨 스코어가 가장 높은 물체를 로봇으로 추정
contours, hierarchy = cv2.findContours(thresh,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2:] # 3개의 리턴 요소 중 뒤의 2개만 리턴
cv2.drawContours(dst_image,contours,-1,(0,0,255),1)
#통신 수신 각도 라인 출력

#slave_id = 1
#if slave_id is 1:
ang = 140 * 2
cv2.line(dst_image, (ang, 0), (ang, 240), (152,225,87), 1)

cv2.imshow("dst_image",dst_image)
cv2.waitKey(0)